<?phpnamespace App\AppPlugin\Product\Helpers;use App\AppPlugin\Product\Models\Category;use App\Http\Controllers\WebMainController;use Illuminate\Http\Request;use Illuminate\Support\Facades\Redirect;use Illuminate\Support\Facades\View;class FilterBuilder extends WebMainController {    public $filterCategory;    public $filterBrand;    public function __construct() {        parent::__construct();        $priceRang_Arr = [            "1" => ['id' => '1', 'from' => 50, 'to' => 1000],            "2" => ['id' => '2', 'from' => 1000, 'to' => 2000],            "3" => ['id' => '3', 'from' => 2000, 'to' => 5000],            "4" => ['id' => '4', 'from' => 5000, 'to' => 10000],            "5" => ['id' => '5', 'from' => 10000, 'to' => null],        ];        $this->priceRang_Arr = $priceRang_Arr;        View::share('priceRang_Arr', $this->priceRang_Arr);        $this->filterCategory = true;        $this->filterBrand = true;    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #   UrlFilterBuilder    public function UrlFilterBuilder(Request $request) {        $oldUrl = $request->url;        $oldFilter = unserialize($request->url_filter);        $newFilter = ['filter' => 1];        if($request->input('ClearFilter') !== null) {            $newFilter = [];            unset($oldFilter['filter']);            unset($oldFilter['brand']);            unset($oldFilter['category']);            unset($oldFilter['rang'], $oldFilter['from'], $oldFilter['to']);            $sendUrl = $oldUrl . "?" . http_build_query(array_merge($oldFilter, $newFilter));            return Redirect::to($sendUrl);        }        if(isset($request->brand) and count($request->brand) > 0) {            $urlText = self::creatLoop($request->brand);            $newFilter = array_merge($newFilter, ['brand' => "[$urlText]"]);        } else {            unset($oldFilter['brand']);        }        if(isset($request->rang) and intval($request->rang) > 0) {            $newFilter = array_merge($newFilter, ['rang' => $request->rang]);            unset($oldFilter['from'], $oldFilter['to']);        } else {            unset($oldFilter['rang']);            if(isset($request->between)) {                if(intval($request->between['from']) > 0) {                    $newFilter = array_merge($newFilter, ['from' => $request->between['from']]);                } else {                    unset($oldFilter['from']);                }                if(intval($request->between['to']) > 0) {                    $newFilter = array_merge($newFilter, ['to' => $request->between['to']]);                } else {                    unset($oldFilter['to']);                }            }        }        if(isset($request->category) and count($request->category) > 0) {            $urlText = self::creatLoop($request->category);            $newFilter = array_merge($newFilter, ['category' => "[$urlText]"]);        } else {            unset($oldFilter['category']);        }        $sendArrFilter = (array_merge($oldFilter, $newFilter));        if(count($sendArrFilter) == 1 or (count($sendArrFilter) == 2 and isset($sendArrFilter['sort']))) {            unset($sendArrFilter['filter']);        }        $sendUrl = $oldUrl . "?" . http_build_query($sendArrFilter);        return Redirect::to($sendUrl);    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #    public function FilterClear(Request $request) {        $oldUrl = $request->url;        $oldFilter = unserialize($request->url_filter);        $formid = $request->formid;        $newFilter = [];        if($formid == 'clearAll') {            unset($oldFilter['filter']);            unset($oldFilter['brand']);            unset($oldFilter['category']);            unset($oldFilter['rang'], $oldFilter['from'], $oldFilter['to']);        }        if($formid == 'rang') {            unset($oldFilter['rang']);        }        if($formid == 'betweenfrom') {            unset($oldFilter['from']);        }        if($formid == 'betweento') {            unset($oldFilter['to']);        }        if($formid == 'brand') {            $id = $request->thisid;            $brandId = self::cleanText($oldFilter['brand']);            $brandId = self::array_remove_by_value($brandId, $id);            if(count($brandId) > 0) {                $urlText = self::creatLoop($brandId);                unset($oldFilter['brand']);                $newFilter = array_merge($newFilter, ['brand' => "[$urlText]"]);            } else {                unset($oldFilter['brand']);            }        }        if($formid == 'category') {            $id = $request->thisid;            $categoryId = self::cleanText($oldFilter['category']);            $categoryId = self::array_remove_by_value($categoryId, $id);            if(count($categoryId) > 0) {                $urlText = self::creatLoop($categoryId);                unset($oldFilter['category']);                $newFilter = array_merge($newFilter, ['category' => "[$urlText]"]);            } else {                unset($oldFilter['category']);            }        }        $sendArrFilter = (array_merge($oldFilter, $newFilter));        if(count($sendArrFilter) == 1 or (count($sendArrFilter) == 2 and isset($sendArrFilter['sort']))) {            unset($sendArrFilter['filter']);        }        $sendUrl = $oldUrl . "?" . http_build_query($sendArrFilter);        return response()->json(['url' => $sendUrl]);    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #     getProductQuery    public function getProductQuery(Request $request, $query) {        if($request->sort) {            switch ($request->sort) {                case 1:                    $query->orderBy('featured', 'DESC');                    break;                case 2:                    $query->orderBy('sales_count', 'DESC');                    break;                case 3:                    $query->orderByTranslation('name', 'ASC');                    break;                case 4:                    $query->orderByTranslation('name', 'DESC');                    break;                case 5:                    $query->orderBy('price', 'ASC')->where('on_stock',true);                    break;                case 6:                    $query->orderBy('price', 'DESC')->where('on_stock',true);                    break;                case 7:                    $query->orderBy('created_at', 'ASC');                    break;                case 8:                    $query->orderBy('created_at', 'DESC');                    break;                default:            }        } else {            $query->orderBy('featured', 'DESC');        }        if($request->rang) {            switch ($request->rang) {                case 1:                    $query->whereBetween('price', [$this->priceRang_Arr[1]['from'], $this->priceRang_Arr[1]['to']])->where('on_stock',true);                    break;                case 2:                    $query->whereBetween('price', [$this->priceRang_Arr[2]['from'], $this->priceRang_Arr[2]['to']])->where('on_stock',true);                    break;                case 3:                    $query->whereBetween('price', [$this->priceRang_Arr[3]['from'], $this->priceRang_Arr[3]['to']])->where('on_stock',true);                    break;                case 4:                    $query->whereBetween('price', [$this->priceRang_Arr[4]['from'], $this->priceRang_Arr[4]['to']])->where('on_stock',true);                    break;                case 5:                    $query->where('price', '>=', $this->priceRang_Arr[5]['from'])->where('on_stock',true);                    break;                default:            }        } else {            if(intval($request->from) > 0 and intval($request->to) == '0') {                $query->where('price', '>=', $request->from)->where('on_stock',true);            } elseif(intval($request->from) == 0 and intval($request->to) > '0') {                $query->where('price', '<=', $request->to)->where('on_stock',true);            } elseif(intval($request->from) > 0 and intval($request->to) > '0') {                $query->where('price', '>=', $request->from)->where('price', '<=', $request->to)->where('on_stock',true);            }        }        if($request->brand) {            $brandId = self::cleanText($request->brand);            if(is_array($brandId) and count($brandId) > 0) {                $query->whereIn('brand_id', $brandId);            }        }        if($request->category) {            $categoryId = self::cleanText($request->category);            if(is_array($categoryId) and count($categoryId) > 0) {                $query->whereHas('categories', function ($query) use ($categoryId) {                    $query->whereIn('category_id', $categoryId);                });            }        }        return $query;    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #   getFilterQuery    public function getFilterQuery($productsQuery) {        $filterData = [];        $ProductId = $productsQuery->pluck('pro_id');        if($this->filterCategory == true) {            $category = Category::whereHas('products', function ($query) use ($ProductId) {                $query->wherein('product_id', $ProductId);            })->withCount(["products" => function ($query) use ($ProductId) {                $query->wherein('product_id', $ProductId);            }])->orderby('products_count', 'desc')->get();            $filterData['categories'] = $category;        }        if($this->filterBrand == true) {            $brandId = $productsQuery->pluck('brand_id')->toarray();            $filterData['brand'] = [];            $filterData['brand'] = self::cleanSortArray($brandId);        }        return $filterData;    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #    public function creatLoop($sendArr) {        $expression = array_values($sendArr);        $newLine = "";        foreach ($expression as $val) {            $newLine = $newLine . $val . "-";        }        $sendLine = rtrim($newLine, "-");        return $sendLine;    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #   cleanText    static function cleanText($text) {        $value = trim($text);        $rep1 = array('[', ']');        $rep2 = array('', '');        $value = str_replace($rep1, $rep2, $value);        $value = explode('-', $value);        $value = array_unique($value);        $value = array_filter($value, 'is_numeric');        return $value;    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #     cleanSortArray    static function cleanSortArray($arr) {//        $arr = array_filter($arr, 'strlen');//        $arr = array_count_values($arr);//        arsort($arr);//        return $arr;        $arr = array_filter($arr, 'strlen');        $arr = array_count_values($arr);        arsort($arr);        return $arr;    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #    public function array_remove_by_value($array, $value) {        return array_values(array_diff($array, array($value)));    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #     setfilterCategory    public function setfilterCategory($setfilterCategory) {        $this->filterCategory = $setfilterCategory;        return $this;    }#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#|||||||||||||||||||||||||||||||||||||| #     setfilterBrand    public function setfilterBrand($setfilterBrand) {        $this->filterBrand = $setfilterBrand;        return $this;    }}